require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const { MongoClient } = require('mongodb');
const jwt = require('jsonwebtoken');

const app = express();
app.use(cors());
app.use(express.json());

// ‚ö†Ô∏è Ph·ª•c v·ª• c√°c file tƒ©nh nh∆∞ HTML, CSS, JS t·ª´ th∆∞ m·ª•c 'public'
app.use(express.static(path.join(__dirname, 'public')));

const PORT = process.env.PORT || 3000;
const mongoUri = process.env.MONGODB_URI;
const client = new MongoClient(mongoUri);
let db;

const JWT_SECRET = process.env.JWT_SECRET || 'secret-key';

// ‚úÖ H√†m x√°c th·ª±c token sinh vi√™n v√† gi√°o vi√™n
function verifyToken(token) {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (err) {
    return null;
  }
}

function verifyTeacherToken(token) {
  const decoded = verifyToken(token);
  return decoded && decoded.role === 'teacher';
}

async function main() {
  await client.connect();
  db = client.db(); // s·ª≠ d·ª•ng database m·∫∑c ƒë·ªãnh

  // üëâ API: ƒêƒÉng nh·∫≠p sinh vi√™n
  app.post('/login', async (req, res) => {
    const { student_id } = req.body;
    if (!student_id) return res.status(400).json({ error: 'Thi·∫øu student_id' });

    const token = jwt.sign({ student_id, role: 'student' }, JWT_SECRET);
    res.json({ token });
  });

  // üëâ API: ƒêƒÉng nh·∫≠p gi√°o vi√™n
  app.post('/login', async (req, res) => {
    const { teacher_id } = req.body;
    if (!teacher_id) return res.status(400).json({ error: 'Thi·∫øu teacher_id' });

    const token = jwt.sign({ teacher_id, role: 'teacher' }, JWT_SECRET);
    res.json({ token });
  });

  // üëâ API: L·∫•y danh s√°ch c√¢u h·ªèi
  app.get('/questions', async (req, res) => {
    const questions = await db.collection('questions').find().toArray();
    res.json(questions);
  });

  // üëâ API: N·ªôp b√†i (l∆∞u v√†o collection "results")
  app.post('/submit', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    const decoded = verifyToken(token);
    if (!decoded || decoded.role !== 'student') return res.status(401).json({ error: 'Unauthorized' });

    const { question_id, code, session_id } = req.body;
    const student_id = decoded.student_id;
    if (!question_id || !code || !session_id) {
      return res.status(400).json({ error: 'Thi·∫øu d·ªØ li·ªáu' });
    }

    // üëâ Ch·∫•m ƒëi·ªÉm ƒë∆°n gi·∫£n: ƒë√∫ng n·∫øu c√≥ t·ª´ "print"
    const correct = code.includes("print");

    await db.collection('results').insertOne({
      student_id,
      question_id,
      session_id,
      code,
      correct,
      submittedAt: new Date()
    });

    res.json({ result: correct ? "‚úÖ ƒê√∫ng" : "‚ùå Sai" });
  });

  // üëâ API: L∆∞u t·ªïng k·∫øt (kh√¥ng b·∫Øt bu·ªôc n·∫øu d√πng "results")
  app.post('/summary', async (req, res) => {
    const token = req.headers.authorization?.split(" ")[1];
    const decoded = verifyToken(token);
    if (!decoded || decoded.role !== 'student') return res.status(401).json({ error: 'Unauthorized' });

    const { student_id, correct, incorrect, total, session_id } = req.body;
    await db.collection('summaries').insertOne({
      student_id,
      correct,
      incorrect,
      total,
      session_id,
      createdAt: new Date()
    });

    res.json({ message: 'T·ªïng k·∫øt ƒë√£ l∆∞u' });
  });

  // üëâ API: Danh s√°ch sinh vi√™n (cho gi√°o vi√™n)
  app.get('/students', async (req, res) => {
    const token = req.headers.authorization?.split(" ")[1];
    if (!verifyTeacherToken(token)) return res.status(401).json({ error: 'Unauthorized' });

    const students = await db.collection('students').find().toArray();
    res.json(students);
  });

  // üëâ API: K·∫øt qu·∫£ chi ti·∫øt ƒë√£ n·ªôp
  app.get('/results', async (req, res) => {
    const token = req.headers.authorization?.split(" ")[1];
    if (!verifyTeacherToken(token)) return res.status(401).json({ error: 'Unauthorized' });

    const results = await db.collection('results').find().toArray();
    res.json(results);
  });

  // üëâ API: T·ªïng h·ª£p k·∫øt qu·∫£ t·ª´ collection "results"
  app.get('/result-summary', async (req, res) => {
    const token = req.headers.authorization?.split(" ")[1];
    if (!verifyTeacherToken(token)) return res.status(401).json({ error: 'Unauthorized' });

    const cursor = await db.collection('results').aggregate([
      {
        $group: {
          _id: "$student_id",
          answers: {
            $push: {
              question_id: "$question_id",
              correct: "$correct"
            }
          },
          correctCount: { $sum: { $cond: ["$correct", 1, 0] } },
          wrongCount: { $sum: { $cond: ["$correct", 0, 1] } }
        }
      }
    ]).toArray();

    res.json(cursor);
  });

  // üëâ N·∫øu truy c·∫≠p "/", tr·∫£ v·ªÅ file role-select.html
  app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'role-select.html'));
  });

  app.listen(PORT, () => {
    console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
  });
}

main().catch(err => console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err));
